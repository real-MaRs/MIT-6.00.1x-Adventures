# MIT-6.00.1x-Adventures
MIT's Introduction to Computer Science and Programming in Python Course

# 3/8/17
Week 5 - Object Oriented Programming

5.1 - Classes and Inheritance

  5.1.1 - Object Oriented Programming: Everything in Python is an object and has a type. Lists, tuples, dictionaries are examples
          of built in data objects. Creating a class involves naming the class and defining class attributes.
          Advantages of OOP: bundle data into packages together with procedures that work on them through well defined interfaces
                             divide and conquer development - implement and test behavior of each class separately
                                                              increases modularity and decreases complexity
                             classes make it easy to reuse code - many Python modules define new classes
                                                                  each class as a separate environment(no collision function names)
                                                                  inheritance allows subclasses to redefine or extend subset of superclass
        
  5.1.2 - Class Instances: Use the class keyword to define a new type. class keyword, class name, class parent parameter(object).
                           The attributes will be the data and procedures that belong to this class.
                           Use the special method __init__ to initialize some data attributes. (self, initial data, initial data)
                           Do not provide argument for the self parameter, Python automatically provides the argument.
                           
  5.1.3 - Methods: A method is a procedural attribute. A method is a function that can only be used in its particular class.
                   The dot operator is used to access any attribute. def methodName(self, data) Use the __str__ method to define
                   print represention of an object. __str__ is the toString method equivalent in Java.
                   __sub__(self,other) = self - other
                   __add__(self, other) = self + other
                   __eq__(self, other) = self == other
                   __lt__(self, other) = self < other
                   __len__(self) = len(self)
                   __str__(self) = print(self)
                   
  5.1.4 - Classes Examples: Went over a fraction class as an example. Common methods of a class are get and set methods.
          Also went over an integer set class to show how we can implement properties of a list to the class.

  5.1.5 - Why OOP: Can bundle together objects that share common attributes and procedures. Important to know the difference
          between creating a class and using a class; they are different code for different things. With classes, you can mimic
          real life and group different objects as the same type. Eg: Different types of cats are still all the same "type"(cat)
          You should always use get methods to get an attribute instead of gettingthe attribute from the class itself because
          if the variable name of the attribute changes, you will get an error. It is also cleaner to always utilize a get method to
          get a specific attribute.
          
  5.1.6 - Hierarchies: You can create a hierachy of classes by using subclasses and superclasses. An animal could be the
          super/parent class of various animal sub/child classes such as dog, cat, bird, etc. Child classes inherit all data
          and behaviors of the parent class. In the child class, you can add more info, add more behavior, or override behavior.
          Parent class cannot access a method from a subclass, but child classes can inherit methods from its parent class.
          You can create a subclass of a subclass as well. eg: person(animal) --> student(person)
          
  5.1.7 - Class Variables: Class variables are created inside of a class but outside of its methods. These variables will be
          accessible to all the methods within the class. The variable is made outside of the init method.
