# MIT-6.00.1x-Adventures
MIT's Introduction to Computer Science and Programming in Python Course

# 1/31/17

Week 2 - Simple Programs

2.1 - Simple Algorithms

  2.1.1 - So Far...: Reviewed what loops and if statements are and went over a guess and check loop. Can slice strings with [start:stop:step]
          Strings are immutable(can't be changed). But strings can be redefined. For loops can loop through strings and numbers.
          ex: number - for variable in range(5:10): (5,6,7,8,9)
--> better    string - for char in s: loop through length of string s                      if char == "a" 
--> meh       string - for index in range(len(s)): loop through length of string s         if index[0] == "a"
          
          word = input("Expecting a string input")
          number = int(input("Expecting a number input")
          
          if(char in string) checks if a character is in a string.
          
# 2/1/17          
          
  2.1.2 - Approximate Solutions: are solutions that are good enough, start with a guess and increment by a small value.
          decreasing increments = slower program, increasing epsilon = less accurate answer. Went over a guess and check algorithm and 
          saw the the difference of number of times a program loops depending on the value of incrementing.
         
  2.1.3 - Bisection Search: At each stage, cut off half the values. The program ran through a loop less than 15 times to get a really
          good answer whereas the approximate solutions took over 30,000. It takes log n time, less than linear. This algorithm should
          work on any problem that has an ordering property.

  2.1.4 - Floats and Fractions: Floats approximate real numbers and it's useful to understand how.
          Decimal Number - 302 = 3*10^2 + 0*10^1 + 2*10^0
          Binary Number - 10011 = 1*2^4 + 0*2^3 + 0*2^2 + 1*2^1 + 1*2^0 = 19
          
          Internally, computers represent numbers in binary.
          
  2.1.5 - Newton-Raphson: It is a general approximation algorithm that lets you find roots of any polynomial. It took around 4 loops to
          guess the square root or cube root of a number, less than the bisection search.
          
          Iterative Algorithms - guess and check methods build on reusing same code, using a loop to generate guesses, check, continue
                               - Generating guesses: Exhaustive enumeration
                                                    Bisection search
                                                     Newton-Raphson (for root find

# 2/2/17

  2.2.1 - Decomposition and Abstraction: A function gives you a way to encapsulate pieces of computation. A function gives two important
          aspects of computational thinking - Decomposition (modularity) and Abstra The idea of abstraction is that once you have built
          something, you don't need to know what is inside it as long as you know how it works. appropiate input = appropriate answer
          Decomposition is breaking down a problem into self contained pieces.
              Modules: - self contained
                       - used to break up code
                       - intended to be reuseable
                       - keep code organized
                       - keep code coherent
           
  2.2.2 - Functions and Scopes: Functions are reusable pieces of code. Functions are not run in a program until they are called or invoked.

          function characteristics: - has a name
                                    - has parameters (0 or more)
                                    - has a docstring (optional but recommended)
                                    - has a body
          
          def is a keyword in Python to define a function.
          
  2.2.3 - Calling Functions: A scope is mapping of names to objects. New scope/frame/environment is created when enter a function.
          Python returns None if there is no return in the function. You can only use return inside a function. Code after the return
          statement will never be executed. You can pass a function inside parameters of another function.
          
  2.2.4 - Keyword Arguments: You can give default parameters by setting a parameter equal to a value. def name(b = false)
  
  2.2.5 - Specification: a contract between the implementer of the function and the clients who will use it.
          Assumptions - conditions that must be met by clients of the functions, typically constraints on parameters.
          Guarantees - condition that must be met by function, what the function will do if assumptions are right.
          TL;DR. ALWAYS USE DOCSTRINGS
          
  2.2.6 - Iteration vs Recursion: A way to design solutions by divide-and-conquer or decrease-and-conquer. A function calls itself.
          Must have 1 or more base cases. Went through some examples of recursion with multiplying and factorials. Each recursive call
          creates its own scope/environment. Bindings of variables are not changed by the recursive call. flow of control passes back to
          previous scope oncea function returns a value. Same variable name, but different objects in seperate scopes.
          
  2.2.7 - Inductive Reasoning: How do we know if our recursive code will work? If it works for the the smallest value of some paramenter
          and the value + 1, then it will work for all values of that parameter.
         
  2.2.8 - Towers of Hanoi: How to move a stack of discs from 1 spike to another without having a bigger disc stack on top of a
          smaller one. Some problems are a lot easier to solve if you able to think recursively. You can have multiple recursive calls in
          a function. You need to break a problem down into smaller ones and then use recursion to break it down until you get the answer.
          
  2.2.9 - Fibonacci: You can have multiple base cases in a function as well. Went over fibonacci numbers and can tell that you need
          multiple base cases because you return the sum of more than one recursive call.
          
  2.2.10 - Recusion and non-numerics: Went over palidromes using recursion. This is a divide and conquer algorithm because it takes a 
           greater problem and makes it easier (in this case, shorter string) and check if the same applies to the shorter string.
