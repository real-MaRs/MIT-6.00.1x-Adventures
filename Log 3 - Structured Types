# MIT-6.00.1x-Adventures
MIT's Introduction to Computer Science and Programming in Python Course

# 2/9/17

Week 3 - Structured Types

3.1 - Tuples and Lists

  3.1.1 - Tuples: A tuple is an ordered sequence of elements, can mix element types. They are immutable and represented with
          parenthesis. ()   You can slice, concantenate, and get index just like strings. Tuples need an extra comma to tell us that
          is it a tuple and not just an expression. you can swap the value of variables. (x, y) = (y, x)

  3.1.2 - List: A list is similar to a tuple. It is a ordered sequence of elements. Denoted with square brackets [].
          Biggest difference is that a list is mutable. It can be changed. You can iterate through lists as well
          
          L = [2, 1, 3]
          L[1] = 5
          
          L is now [2, 5, 3]
          
  3.1.3 - List Operations: append() adds to end of list. Add lists together with +. Use extend to add another list to your list.
          del(tuple[index]) removes the element from the list. pop() removes last element in list, returns the removed element
          remove(element) looks for element in list and removes it, only the first one if there are multiple, if not in list, error

# 2/11/17
  
  3.1.4 - Mutation, Aliasing, Cloning: lists are mutable. Lists are objects in memory. When mulitple variables point to the same list
          when the list is changed, the value is changed for all variables. You can clone or make a copy or a list by using [:].
          sort() mutates the list and sorted() makes a new sorted list.
          
  
  3.1.5 - Functions as Objects: Functions are first class objects. You can use functions in arguments called higher order programming.
          
# 2/12/17
  
3.2 - Dictionaries
  
  3.2.1 - Quick Review: Overloading is a very nice aspect in Python.
  
  3.2.2 - Dictionaries: nice to use one data structure instead of multiple lists. Pairs of data, a key and a value.
          my_dict = {key: value, key: value, key: value} .keys() gets an interable of all keys, .values() gets all values.
          
# 2/13/17

  3.2.3 - Example with a Dictionary: you can use max(value) to get the biggest number in a collection of data. Made a dictionary
          with a function and then made other functions to return a tuple of the amount of times a word is in a string.
          
  3.2.4 - Fibonacci and Dictionary: Using just recursion to find fibonacci numbers can be very inefficient. You need to recalculate the 
          same value many times. You can use a dictionary to keep track of what you have already computed by by storing the values of fibs
          This process is called memoization which is keeping a memo of what you have already done.
          
  3.2.4 - Global Variables: Can be dangerous to use. They can break the scoping of variables by function call but can also be convenient
          to keep track of information inside a function. ex: measuring how often fib and fib_effienct are called. You can call a global
          variable within a function by using the global keyboard in python. It will then be accessible outside of the function.
          USING DICTIONARIES FOR MEMOIZATION IS AMAZING.
