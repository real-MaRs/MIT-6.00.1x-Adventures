# MIT-6.00.1x-Adventures
MIT's Online Introduction to Computer Science and Programming in Python Course 

# 1/25/17

Week 0 - Getting started

Today I installed Python 3.5 and learned how to use the Spyder IDE. I learned how to print things and ran my first Hello World program
in Python. I made a directory for all the coursework and learned how to create and save files. I also learned how to import libraries such
as matplotlib and numpy which we will use later in the course.

Week 1 - Python Basics

1.1 - Introduction to Python

  1.1.1 - Introduction: Overview of what the course would be about and the topics that will be covered. I learned that computers are actually
          REALLY fast, but not fast enough. We can further optimize speeds by being clever and thinking algorithmically.
  
  1.1.2 - Knowledge: There are different types of knowledge, declarative and imperative. Declarative is simply a state of fact. Imperative is
          a recipe or "how-to". Imperative knowledge is how we will get computers to do things for us.
        
          An algorithm consists:
            1. a squence of steps 
            2. flow of control process that specifies when each step is executed
            3. a means of determining when to stop

  1.1.3 - Machines: There are fixed program computers and stored program computers. Fixe program can only do 1 thing (calculator, Alan
          Turling's Bombe). A stored program computer can do many things. They store and execute instructions, you can load into it. There's
          also a special program in a stored program computer called an interpreter.
          Turing Complete - ANYTHING THAT CAN BE COMPUTED IN ONE LANGUAGE CAN BE COMPUTED IN ANY OTHER LANGUAGE.
          
          Basic Machine Architecture
            1. Memory - contains data, sequence of steps; program
            2. Arithmetic Logic Unit (ALU) - takes data from memory, do primitive operations and stores it back into memory
            3. Control Unit - Keeps track of which operation to do in ALU at a point in time. Contains the program counter. The program
               counter points to the sequence of intructions from memory and changes each time ALU computes something.
            4. Input/Output
          
          Basic Primitives:
            1. Turing showed you can compute anything using 6 primitives (move left, move right, scan, read, write, do nothing).
            
  1.1.4 - Languages: How to combine recipe and machine. A programming language provides set of primitive operations. An expression are
          more complex, but legal combinations of primitives that the programming language will recognize. Need to follow syntax and
          static semantics.
          
          Errors: syntactic, static semantic, different meaning than what programmer intended.
          
          GOAL: learn syntax and semantics of Python, learn how to use those elements to translate "recipes" for solving a problem in
                form that the computer can do the work for us, build up computational modes of thought(styles, patterns).
                
  1.1.5 - Types: a program is a sequence of definitions and commands. Programs manipulate data objects. Different types of objects lets 
          the program do different things to it. Objects can be scalar(cannot be subdivided) or non-scalar(have internal structure that
          can be accessed).1
          
          use type() to see type. ex: type(5)
          SCALAR OBJECTS:
            - int: integers, 5
            - float: real numbers, 3.27
            - bool: Boolean, True and False
            - NoneType- special, one value: None
          
          you can change type of object called CASTING. float() int()
          
          operations on INT and FLOAT
            - i+j
            - i-j       both ints, return int
            - i*j       either or both float, return float
            - i/j --> result is float
            - i//j --> result is int, quotient without remainder
            - i%j --> remainder
            - i**j --> it to the power of j

  1.1.6 - Variables: Giving names to things is abstraction. Assigning names to expressions allows to reuse value as well as give a better
          meaning of the value. The values are stored in memory and reassigning a used name to a different value loses handle of the old 
          value.
          
  1.1.7 - Operators and Braching: Comparison Operators on INT and float: >, <, >=, <=, ==, !=
                                  Logic Operators on BOOL: not equal, and, or
                                  The simpliest branching statement is a conditional. if, else, elif(else if)
                                  
          In Python, indentation is very important because each indented set of expressions denotes a block of instructions. Also for
          visual structure. Branching programs allow us to make choices and do different things. Each state only gets executed once.
          Maximum time to run the program depends on the length of the program. These programs run in CONSTANT TIME.
          

1.2 - Core Elements of Programs

  1.2.1 - Bindings: 




